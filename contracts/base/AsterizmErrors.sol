// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

library AsterizmErrors {

    // For Translator contract
    uint16 constant TRANSLATOR__ONLY_INITIALIZER__ERROR = 2001;
    uint16 constant TRANSLATOR__ONLY_RELAYER__ERROR = 2002;
    uint16 constant TRANSLATOR__CHAIN_TYPE__ERROR = 2003;
    uint16 constant TRANSLATOR__REMOVING_LOCAL_CHAIN__ERROR = 2004;
    uint16 constant TRANSLATOR__CHAIN_NOT_EXISTS__ERROR = 2005;
    uint16 constant TRANSLATOR__BALANCE_NOT_ENOUGH__ERROR = 2006;
    uint16 constant TRANSLATOR__TRANSFER_ERROR__ERROR = 2007;
    uint16 constant TRANSLATOR__WRONG_CHAIN_ID__ERROR = 2008;
    uint16 constant TRANSLATOR__ADDRESS_IS_NOT_CONTRACT__ERROR = 2009;

    // For Initializer contract
    uint16 constant INITIALIZER__ONLY_TRANSLATOR__ERROR = 3001;
    uint16 constant INITIALIZER__ONLY_TRANSLATOR_OR_EXTERNAL_RELAY__ERROR = 3002;
    uint16 constant INITIALIZER__TRANSFER_NOT_EXISTS__ERROR = 3003;
    uint16 constant INITIALIZER__BALANCE_NOT_ENOUGH__ERROR = 3004;
    uint16 constant INITIALIZER__TRANSFER_ERROR__ERROR = 3005;
    uint16 constant INITIALIZER__SENDER_ADDRESS_BLOCKED__ERROR = 3006;
    uint16 constant INITIALIZER__TARGET_ADDRESS_BLOCKED__ERROR = 3007;
    uint16 constant INITIALIZER__FEE_NOT_ENOUGH__ERROR = 3008;
    uint16 constant INITIALIZER__WRONG_DESTINATION_ADDRESS__ERROR = 3009;

    // For Asterizm client contract
    uint16 constant CLIENT__ONLY_INITIALIZER__ERROR = 4001;
    uint16 constant CLIENT__ONLY_OWNER_OR_INITIALIZER__ERROR = 4002;
    uint16 constant CLIENT__WRONG_TRUSTED_ADDRESS__ERROR = 4003;
    uint16 constant CLIENT__INVALID_HASH__ERROR = 4004;
    uint16 constant CLIENT__TRANSFER_NOT_RECEIVED__ERROR = 4005;
    uint16 constant CLIENT__TRANSFER_EXECUTED_ALREADY__ERROR = 4006;
    uint16 constant CLIENT__OUTBOUND_TRANSFER_NOT_EXISTS__ERROR = 4007;
    uint16 constant CLIENT__OUTBOUND_TRANSFER_EXECUTED_ALREADY__ERROR = 4008;
    uint16 constant CLIENT__OUTBOUND_TRANSFER_NOT_EXECUTED__ERROR = 4009;
    uint16 constant CLIENT__RELAY_CHANGING_NOT_AVAILABLE__ERROR = 4010;
    uint16 constant CLIENT__TRUSTED_ADDRESS_NOT_FOUND__ERROR = 4011;
    uint16 constant CLIENT__BALANCE_NOT_ENOUGH__ERROR = 4012;
    uint16 constant CLIENT__WRONG_TXID__ERROR = 4013;
    uint16 constant CLIENT__TOKEN_BALANCE_NOT_ENOUGH__ERROR = 4013;

    // For Sender contract
    uint16 constant SENDER__ONLY_SENDER__ERROR = 5001;
    uint16 constant SENDER__ONLY_SENDER_OR_OWNER__ERROR = 5002;
    uint16 constant SENDER__SENDER_NOT_EXISTS__ERROR = 5003;

    // For Refund contract
    uint16 constant REFUND__TRANSFER_WAS_REFUNDED__ERROR = 5001;
    uint16 constant REFUND__REFUND_TRANSFER_EXISTS_ALREADY__ERROR = 5002;
    uint16 constant REFUND__REFUND_LOGIC_DISABLED__ERROR = 5003;
    uint16 constant REFUND__REFUND_TRANSFER_NOT_EXISTS__ERROR = 5004;
    uint16 constant REFUND__SMALL_VALUE__ERROR = 5005;
    uint16 constant REFUND__REFUND_REQUEST_EXISTS_ALREADY__ERROR = 5006;
    uint16 constant REFUND__REFUND_TRANSFER_PROCESSED_ALREADY__ERROR = 5007;
    uint16 constant REFUND__WRONG_SENDER_ADDRESS__ERROR = 5008;
    uint16 constant REFUND__TRANSFER_ERROR__ERROR = 5009;
    uint16 constant REFUND__REFUND_REQUEST_NOT_EXISTS__ERROR = 5010;
    uint16 constant REFUND__BALANCE_NOT_ENOUGH__ERROR = 5011;

    // For Withdrawal contract
    uint16 constant WITHDRAWAL__COIN_WITHDRAWAL_DISABLE__ERROR = 6001;
    uint16 constant WITHDRAWAL__TOKEN_WITHDRAWAL_DISABLE__ERROR = 6002;
    uint16 constant WITHDRAWAL__BALANCE_NOT_ENOUGH__ERROR = 6003;
    uint16 constant WITHDRAWAL__TRANSFER_ERROR__ERROR = 6004;

    // For Omnichain token contract
    uint16 constant WITHDRAWAL__AMOUNT_TOO_SMALL__ERROR = 7001;
}
